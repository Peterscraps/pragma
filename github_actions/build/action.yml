name: Build
description: 'Build library'
inputs:
  root_dir:
    description: 'Root directory'
    required: true
  should_checkout:
    description: 'Checkout the core library?'
    required: true
    default: '1'
  dir:
    description: 'Library directory'
    required: true
    default: 'core/shared'
runs:
  using: "composite"
  steps:
    - name: Initialize Env
      id: init-env
      uses: Silverlan/common_actions/set_common_env_vars@main
      
    - uses: ChristopherHX/conditional@b4a9649204f81002ec9a4ef7d4bf7d6b2ab7fa55
      name: CMake Build
      with:
        if: ${{inputs.should_checkout == '1'}}
        step: |
          uses: Silverlan/common_actions/get_submodule@main
          with:
            repo: 'Silverlan/pragma'
            repo_name: 'pragma'
            cmake_var: 'DEPENDENCY_SHARED_INCLUDE'
            dir: 'external_libs'
            
    #- name: Build submodule - util_source2
    #  uses: Silverlan/util_source2/github_actions/build@master
    #  with:
    #    root_dir: "${{ env.GA_ROOT_DIR }}/external_libs/util_source2"   
            
 #   - uses: Silverlan/common_actions/get_submodule@main
 #     with:
 #       repo: 'https://github.com/lz4/lz4.git'
 #       repo_name: 'lz4'
 #       repo_branch: 'release'
 #       cmake_var: 'DEPENDENCY_LZ4_INCLUDE'
 #       dir: 'third_party_libs'

 #   # Can't invoke wgui action directly: Error: Composite action depth exceeded max depth 9
 #   #- name: Build submodule - wgui
 #   #  uses: Silverlan/wgui/github_actions/build@master
 #   #  with:
 #   #    root_dir: "${{ env.GA_ROOT_DIR }}/external_libs/wgui"
    
 #   - name: Define CMake Variables
 #     uses: Silverlan/common_actions/define_cmake_var@main
 #     with:
 #       cmake_var: '-DWGUI_INCLUDE_DEPENDENCIES=OFF'
            
    #- name: Build submodule - freetype2
    #  uses: Silverlan/common_actions/build_submodule@main
    #  with:
    #    repo: 'https://github.com/aseprite/freetype2'
    #    repo_name: 'freetype'
    #    repo_branch: 'master'
    #    build_target: freetype
    #    cmake_var: 'DEPENDENCY_FREETYPE_INCLUDE'
    #    cmake_var_lib: 'DEPENDENCY_FREETYPE_LIBRARY'
    #    cmake_definitions_tmp: ' -DCMAKE_POSITION_INDEPENDENT_CODE=ON'
    #    static_library: '1'
            
    #- name: Build submodule - materialsystem
    #  uses: Silverlan/materialsystem/github_actions/build@master
    #  with:
    #    root_dir: "${{ env.GA_ROOT_DIR }}/external_libs/materialsystem"
    #    
    #- name: Build submodule - util_formatted_text
    #  uses: Silverlan/util_formatted_text/github_actions/build@master
    #  with:
    #    root_dir: "${{ env.GA_ROOT_DIR }}/external_libs/util_formatted_text"
        
    #- name: Build submodule - wgui
    #  uses: Silverlan/common_actions/build_submodule@main
    #  with:
    #    repo: 'https://github.com/Silverlan/wgui'
    #    repo_name: 'wgui'
    #    repo_branch: 'master'
    #    build_target: wgui
    #    cmake_var: 'DEPENDENCY_WGUI_INCLUDE'
    #    cmake_var_lib: 'DEPENDENCY_WGUI_LIBRARY'
    #    cmake_definitions_tmp: ' -DWGUI_INCLUDE_DEPENDENCIES=OFF'
    
    

    - name: Create file
      id: test-create
      shell: bash
      run: |
        printf '%s' " Some test text" >> test_file.txt
    
    - name: Cache NPM dependencies
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: test-key-${{ hashFiles('./test_file.txt') }}
        restore-keys: |
          test-key-
        #key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
        #restore-keys: |
        #  ${{ runner.OS }}-npm-cache-
        
    - name: Create file
      id: test-read
      shell: bash
      run: |
        value="$(cat test_file.txt)"
        echo "File contents: $value"
    
    
    
    # Works!
    #- name: Download submodule - GLM 0.9.9.8
    #  uses: Silverlan/common_actions/curl_download@main
    #  with:
    #    download_url: 'https://boostorg.jfrog.io/artifactory/main/release/1.76.0/source/boost_1_76_0.zip'
    #    file_name: 'boost_1_76_0.zip'
    
    #- name: Build zlip
    #  uses: Silverlan/common_actions/build_zlib@main
    
    #- name: Install boost
    #  id: install-boost
    #  shell: pwsh
    #  run: |
    #    echo "cd..."
    #    cd "./third_party_libs/boost_1_76_0"
    #    echo "Running boost bootstrap..."
    #    .\bootstrap.bat
    #    echo "Running b2..."
    #    .\b2 toolset=msvc-14.2 address-model=64 stage variant=release link=shared runtime-link=shared -j3
    #    .\b2 toolset=msvc-14.2 address-model=64 stage variant=release link=static runtime-link=shared -j3
    #    set ZLIB_SOURCE="$PWD/third_party_libs/zlib"
    #    set ZLIB_INCLUDE="$PWD/third_party_libs/zlib"
    #    set ZLIB_LIBPATH="$PWD/third_party_libs/zlib/build/RelWithDebInfo"
    #    echo "Running b2 for zlib..."
    #    .\b2 toolset=msvc-14.2 address-model=64 stage variant=release link=shared runtime-link=shared --with-iostreams -sZLIB_SOURCE=%ZLIB_SOURCE% -sZLIB_INCLUDE=%ZLIB_INCLUDE% -sZLIB_LIBPATH=%ZLIB_LIBPATH%
    #    .\b2 toolset=msvc-14.2 address-model=64 stage variant=release link=static runtime-link=shared --with-iostreams -sZLIB_SOURCE=%ZLIB_SOURCE% -sZLIB_INCLUDE=%ZLIB_INCLUDE% -sZLIB_LIBPATH=%ZLIB_LIBPATH%
    #    echo "Done!"
    # end
    
    #- name: Install xorg-dev
    #  shell: bash
    #  run: |
    #    cd "./third_party_libs/boost_1_76_0"
    #    ls -R
    
    
    #- name: Install xorg-dev
    #  id: setup-vtflib-build
    #  shell: bash
    #  run: |
    #    if [ "$RUNNER_OS" == "Linux" ]; then
    #      # Required for glfw
    #      sudo apt install xorg-dev
    #    fi
    
    #- name: Remove modules
    #  id: rem-mod
    #  shell: bash
    #  run: |
    #    # rm -rf ./modules/pr_curl
    #    rm -rf ./modules/pr_prosper_opengl
    #    rm -rf ./modules/pr_prosper_vulkan
            
    #- uses: Silverlan/common_actions/build_cmake@main
    #  name: CMake Build
    #  with:
    #    build_type: ${{ matrix.config.build_type }}
    #    build_generator: ${{ matrix.config.generators }}
    #    cmake_var: 'DEPENDENCY_SHARED_LIBRARY'
    #    build_target: shared
    #    build_dir: '${{ matrix.config.build_dir }}/${{ inputs.dir }}'
    #    cmake_script_location: '${{ inputs.dir }}'
